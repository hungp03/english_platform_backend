spring:
  application:
    name: english-api
  data:
    redis:
      host: ${REDIS_HOST}
      username: ${REDIS_USERNAME}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      repositories:
        enabled: false
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=${DB_SSL_MODE:disable}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    properties:
      hibernate:
        id:
          new_generator_mappings: true
        jdbc:
          batch_size: 50
          order_inserts: true
          order_updates: true
        format_sql: true
  main:
    banner-mode: off
  mail:
    username: ${MAIL_USERNAME}
    port: ${MAIL_PORT}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            required: true
            enable: true
    host: ${MAIL_HOST}
    password: ${MAIL_PASSWORD}
    protocol: smtp
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
              - openid
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
jwt:
  secret-key: ${JWT_SECRET_KEY}
  expiration:
    access-token: ${JWT_ACCESSTOKEN_EXP} #s
    refresh-token: ${JWT_REFRESHTOKEN_EXP} #s
server:
  port: ${PORT:8080}

springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false
    url: /v3/api-docs
app:
  media:
    secret-token: ${MEDIA_SECRET_TOKEN}
  register-verification-link: ${REGISTRATION_VERIFY_URL}
  client-url: ${CLIENT_URL}
  worker:
    url: ${WORKER_URL}
    api-token: ${WORKER_API_TOKEN}
    callback-secret: ${WORKER_CALLBACK_SECRET}

cloud:
  endpoint: ${S3_ENDPOINT}
  accessKey: ${S3_ACCESS_KEY}
  secretKey: ${S3_SECRET_KEY}
  bucket: ${S3_BUCKET}
  public-url: ${S3_PUBLIC_URL}

payos:
  client-id: ${PAYOS_CLIENT_ID}
  api-key: ${PAYOS_API_KEY}
  checksum-key: ${PAYOS_CHECKSUM_KEY}
  success-url: ${PAYOS_SUCCESS_URL}
  cancel-url: ${PAYOS_CANCEL_URL}

stripe:
  secret-key: ${STRIPE_SECRET_KEY}
  webhook-secret: ${STRIPE_WEBHOOK_SECRET}
  success-url: ${STRIPE_SUCCESS_URL}
  cancel-url: ${STRIPE_CANCEL_URL}



#logging:
#  level:
#    org.springframework.orm.jpa: DEBUG
#    org.springframework.transaction: DEBUG
#    org.hibernate.SQL: DEBUG
#    org.hibernate.jdbc.BatchingBatch: DEBUG
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
#    org.hibernate.engine.jdbc.batch.internal.BatchingBatch: DEBUG
#    org.hibernate.engine.jdbc.batch.internal.BatchingBatchPerform: DEBUG
